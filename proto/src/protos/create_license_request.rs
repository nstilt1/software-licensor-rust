// This file is @generated by prost-build.
/// A store registration request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateLicenseRequest {
    #[prost(string, tag = "10")]
    pub customer_first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub customer_last_name: ::prost::alloc::string::String,
    /// this email address can be displayed in the product's GUI
    #[prost(string, tag = "30")]
    pub customer_email: ::prost::alloc::string::String,
    #[prost(string, tag = "40")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "50")]
    pub user_id: ::prost::alloc::string::String,
    /// this success message will override the plugin's success message in the
    /// database
    #[prost(string, tag = "60")]
    pub custom_success_message: ::prost::alloc::string::String,
    /// map of Product IDs to ProductInfo
    #[prost(map = "string, message", tag = "70")]
    pub product_info: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ProductInfo,
    >,
    #[prost(uint64, tag = "100")]
    pub timestamp: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductInfo {
    #[prost(string, tag = "20")]
    pub license_type: ::prost::alloc::string::String,
    /// the amount of licenses purchased, allowing `max_machines_per_license
    /// * quantity` machines
    #[prost(uint32, tag = "30")]
    pub quantity: u32,
    #[prost(string, tag = "40")]
    pub subtotal: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LicenseDbItem {
    #[prost(bytes = "vec", tag = "10")]
    pub license_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "20")]
    pub customer_first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "30")]
    pub customer_last_name: ::prost::alloc::string::String,
    #[prost(string, tag = "40")]
    pub customer_email: ::prost::alloc::string::String,
    /// a string appended to a license code that can allow the user to
    /// activate an offline license. This "secret" is used because
    /// offline machines cannot be reliably deactivated
    #[prost(string, tag = "50")]
    pub offline_secret: ::prost::alloc::string::String,
}
