// This file is @generated by prost-build.
/// Some ecdh key information. This key expires, but it is designed to be
/// used immediately after it is fetched by the client and swapped out with
/// a non-expiring one. The non-expiring one is meant to only be used once
/// as well, and the response from the server will contain a new public
/// key for the next request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpiringEcdhKey {
    #[prost(bytes = "vec", tag = "1")]
    pub ecdh_key_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub ecdh_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub ecdh_public_key_pem: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpiringEcdsaKey {
    #[prost(bytes = "vec", tag = "1")]
    pub ecdsa_key_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub ecdsa_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "4")]
    pub ecdsa_public_key_pem: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub expiration: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PubkeyRepo {
    /// randomly select an ECDH key from this list of keys.
    #[prost(message, repeated, tag = "1")]
    pub ecdh_keys: ::prost::alloc::vec::Vec<ExpiringEcdhKey>,
    #[prost(message, optional, tag = "2")]
    pub ecdsa_key: ::core::option::Option<ExpiringEcdsaKey>,
}
