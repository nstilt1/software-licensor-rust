// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateLicenseRequest {
    #[prost(string, tag = "10")]
    pub customer_first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub customer_last_name: ::prost::alloc::string::String,
    /// this email address can be displayed in the product's GUI
    #[prost(string, tag = "30")]
    pub customer_email: ::prost::alloc::string::String,
    #[prost(string, tag = "40")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "50")]
    pub user_id: ::prost::alloc::string::String,
    /// this success message will override the plugin's success message in the
    /// database
    #[prost(string, tag = "60")]
    pub custom_success_message: ::prost::alloc::string::String,
    /// map of Product IDs to ProductInfo
    #[prost(map = "string, message", tag = "70")]
    pub product_info: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ProductInfo,
    >,
}
/// license-type-specific product information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductInfo {
    #[prost(oneof = "product_info::LicenseType", tags = "1, 2, 3")]
    pub license_type: ::core::option::Option<product_info::LicenseType>,
}
/// Nested message and enum types in `ProductInfo`.
pub mod product_info {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum LicenseType {
        #[prost(message, tag = "1")]
        Subscription(super::SubscriptionLicense),
        #[prost(message, tag = "2")]
        PerpetualLicense(super::PerpetualLicense),
        #[prost(message, tag = "3")]
        TrialLicense(super::TrialLicense),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerpetualLicense {
    #[prost(uint32, tag = "1")]
    pub subtotal: u32,
    #[prost(uint32, tag = "2")]
    pub quantity: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionLicense {
    /// how long the license should last; typical lengths are 30 days or 365 days
    #[prost(uint64, tag = "1")]
    pub subscription_period: u64,
    #[prost(uint32, tag = "2")]
    pub subtotal: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrialLicense {
    #[prost(uint32, tag = "1")]
    pub subtotal: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateLicenseResponse {
    /// This license_info is a protobuf binary-encoded GetLicenseResponse
    #[prost(bytes = "vec", tag = "1")]
    pub license_info: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, string", tag = "4")]
    pub issues: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
