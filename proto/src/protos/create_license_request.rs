// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateLicenseRequest {
    #[prost(string, tag = "10")]
    pub customer_first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub customer_last_name: ::prost::alloc::string::String,
    /// this email address can be displayed in the product's GUI
    #[prost(string, tag = "30")]
    pub customer_email: ::prost::alloc::string::String,
    #[prost(string, tag = "40")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "50")]
    pub user_id: ::prost::alloc::string::String,
    /// this success message will override the plugin's success message in the
    /// database
    #[prost(string, tag = "60")]
    pub custom_success_message: ::prost::alloc::string::String,
    /// map of Product IDs to ProductInfo
    #[prost(map = "string, message", tag = "70")]
    pub product_info: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ProductInfo,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProductInfo {
    #[prost(string, tag = "20")]
    pub license_type: ::prost::alloc::string::String,
    /// the amount of licenses purchased, allowing `max_machines_per_license
    /// * quantity` machines
    #[prost(uint32, tag = "30")]
    pub quantity: u32,
    #[prost(string, tag = "40")]
    pub subtotal: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateLicenseResponse {
    /// this license code will be used for all products from this store for
    /// this user
    #[prost(string, tag = "1")]
    pub license_code: ::prost::alloc::string::String,
    /// the offline code (if there is one) for the user to activate an offline
    /// license for their licenses
    #[prost(string, tag = "2")]
    pub offline_code: ::prost::alloc::string::String,
    /// the updated machine limits for each product
    #[prost(map = "string, uint64", tag = "3")]
    pub machine_limits: ::std::collections::HashMap<::prost::alloc::string::String, u64>,
    /// if there are any issues, there will be an error message corresponding to
    /// the product ID
    #[prost(map = "string, string", tag = "4")]
    pub issues: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
