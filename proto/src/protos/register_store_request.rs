// This file is @generated by prost-build.
/// A store registration request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterStoreRequest {
    /// string contact_first_name = 1;
    /// string contact_last_name = 2;
    /// string contact_email = 3;
    /// string discord_username = 10;
    /// string country = 29;
    #[prost(oneof = "register_store_request::PublicSigningKey", tags = "37, 38")]
    pub public_signing_key: ::core::option::Option<
        register_store_request::PublicSigningKey,
    >,
}
/// Nested message and enum types in `RegisterStoreRequest`.
pub mod register_store_request {
    /// string contact_first_name = 1;
    /// string contact_last_name = 2;
    /// string contact_email = 3;
    /// string discord_username = 10;
    /// string country = 29;
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum PublicSigningKey {
        #[prost(string, tag = "37")]
        Pem(::prost::alloc::string::String),
        #[prost(bytes, tag = "38")]
        Der(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Configs {
    /// some notes about "frequency" and "expiration":
    ///
    /// the frequency dictates the minimum amount of time that must pass before a
    /// client will reconnect with the server to check on the status of their
    /// license(s). This is important in case the user tries to remove a machine
    /// from their license, or if they were to refund their license purchase
    ///
    /// the expiration dictates how long the client will be able to go without
    /// contacting the server. The expiration is important in the event that a
    /// user were to deactivate a computer on their license, and if the
    /// "deactivated" client never reached back out to the server to find out
    /// that it is supposed to be deactivated
    #[prost(uint32, tag = "70")]
    pub offline_license_frequency_hours: u32,
    #[prost(uint32, tag = "80")]
    pub perpetual_license_expiration_days: u32,
    #[prost(uint32, tag = "90")]
    pub perpetual_license_frequency_hours: u32,
    #[prost(uint32, tag = "100")]
    pub subscription_license_expiration_days: u32,
    /// these "leniency hours" get added onto the expiration date in case there's
    /// a niche timing unalignment with any communicating servers, such as the
    /// payment processor processing the subscription payment that has to be
    /// hooked from the store's backend that has to send a request to the
    /// licensing
    #[prost(uint32, tag = "110")]
    pub subscription_license_expiration_leniency_hours: u32,
    #[prost(uint32, tag = "120")]
    pub subscription_license_frequency_hours: u32,
    #[prost(uint32, tag = "130")]
    pub trial_license_expiration_days: u32,
    #[prost(uint32, tag = "140")]
    pub trial_license_frequency_hours: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterStoreResponse {
    #[prost(string, tag = "1")]
    pub store_id: ::prost::alloc::string::String,
}
