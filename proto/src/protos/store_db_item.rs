// This file is @generated by prost-build.
/// store database item. This is stored in a protobuf message so that its contents can be easily encrypted. The content in the encrypted message will not be able to be analyzed with tools such as AWS Athena.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreDbItem {
    #[prost(string, tag = "1")]
    pub contact_first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub contact_last_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub store_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub store_url: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub discord_username: ::prost::alloc::string::String,
    #[prost(string, tag = "27")]
    pub state: ::prost::alloc::string::String,
    #[prost(string, tag = "29")]
    pub country: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "30")]
    pub configs: ::core::option::Option<Configs>,
    /// a list of product_ids that the store is licensing to customers
    #[prost(bytes = "vec", repeated, tag = "35")]
    pub product_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Configs {
    /// some notes about "frequency" and "expiration":
    ///
    /// the frequency dictates the minimum amount of time that must pass before a
    /// client will reconnect with the server to check on the status of their
    /// license(s). This is important in case the user tries to remove a machine
    /// from their license, or if they were to refund their license purchase
    ///
    /// the expiration dictates how long the client will be able to go without
    /// contacting the server. The expiration is important in the event that a
    /// user were to deactivate a computer on their license, and if the
    /// "deactivated" client never reached back out to the server to find out
    /// that it is supposed to be deactivated
    #[prost(uint32, tag = "70")]
    pub offline_license_frequency_hours: u32,
    #[prost(uint32, tag = "80")]
    pub perpetual_license_expiration_days: u32,
    #[prost(uint32, tag = "90")]
    pub perpetual_license_frequency_hours: u32,
    #[prost(uint32, tag = "100")]
    pub subscription_license_expiration_days: u32,
    /// these "leniency hours" get added onto the expiration date in case there's
    /// a niche timing unalignment with any communicating servers, such as the
    /// payment processor processing the subscription payment that has to be
    /// hooked from the store's backend that has to send a request to the
    /// licensing
    #[prost(uint32, tag = "110")]
    pub subscription_license_expiration_leniency_hours: u32,
    #[prost(uint32, tag = "120")]
    pub subscription_license_frequency_hours: u32,
    #[prost(uint32, tag = "130")]
    pub trial_license_expiration_days: u32,
    #[prost(uint32, tag = "140")]
    pub trial_license_frequency_hours: u32,
}
